generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("CLOUD_SQL_URL")
}

model User {
  id        String    @id @default(uuid()) @db.VarChar(36)
  account   String    @unique @db.VarChar(30)
  password  String    @db.Char(128)
  salt      String    @db.Char(32)
  name      String    @db.VarChar(30)
  phone     String    @unique @db.Char(10)
  avatarId  String    @unique @map("avatar_id") @db.VarChar(36)
  createdAt DateTime  @default(now()) @map("craete_at")
  postCount Int       @default(0) @map("post_count")
  customer  Customer?
  store     Store?
  avatar    Picture   @relation(fields: [avatarId], references: [id])
}

model Customer {
  id             String         @id @default(uuid()) @db.VarChar(36)
  email          String         @db.VarChar(50)
  followingCount Int            @default(0) @map("following_count")
  userId         String         @unique @map("user_id") @db.VarChar(36)
  user           User           @relation(fields: [userId], references: [id])
  customerPost   CustomerPost[]
  following      Following[]
}

model Store {
  id           String         @id @default(uuid()) @db.VarChar(36)
  address      String         @db.TinyText
  info         String         @db.Text
  userId       String         @unique @map("user_id") @db.VarChar(36)
  customerPost CustomerPost[]
  following    Following[]
  user         User           @relation(fields: [userId], references: [id])
  storePost    StorePost[]
  storeRating  StoreRating?
}

model Following {
  customerId String   @map("customer_id") @db.VarChar(36)
  storeId    String   @map("store_id") @db.VarChar(36)
  customer   Customer @relation(fields: [customerId], references: [id])
  store      Store    @relation(fields: [storeId], references: [id])

  @@unique([customerId, storeId])
  @@index([storeId], map: "Following_store_id_fkey")
}

model Rating {
  general     Float         @default(0) @db.Float
  environment Float         @default(0) @db.Float
  meals       Float         @default(0) @db.Float
  attitude    Float         @default(0) @db.Float
  id          String        @id @default(uuid()) @db.VarChar(36)
  userPost    CustomerPost?
  storeRating StoreRating?
}

model StoreRating {
  storeId   String @unique @map("store_id") @db.VarChar(36)
  ratingId  String @unique @map("rating_id") @db.VarChar(36)
  postCount Int    @default(0) @map("post_count")
  rating    Rating @relation(fields: [ratingId], references: [id])
  store     Store  @relation(fields: [storeId], references: [id])
}

model Picture {
  id          String        @id @default(uuid()) @db.VarChar(36)
  data        String        @db.VarChar(89)
  postPicture PostPicture[]
  user        User?
}

model PostPicture {
  pictureId String  @map("picture_id") @db.VarChar(36)
  postId    String  @map("post_id") @db.VarChar(36)
  picture   Picture @relation(fields: [pictureId], references: [id])
  post      Post    @relation(fields: [postId], references: [id])

  @@unique([pictureId, postId])
  @@index([postId], map: "PostPicture_post_id_fkey")
}

model Post {
  id           String        @id @default(uuid()) @db.VarChar(36)
  body         String        @db.Text
  postAt       DateTime      @default(now()) @map("post_at")
  updateAt     DateTime      @updatedAt @map("update_at")
  customerPost CustomerPost?
  postPicture  PostPicture[]
  storePost    StorePost?
}

model CustomerPost {
  id         String   @id @default(uuid()) @db.VarChar(36)
  postId     String   @unique @map("post_id") @db.VarChar(36)
  ratingId   String   @unique @map("rating_id") @db.VarChar(36)
  customerId String   @map("customer_id") @db.VarChar(36)
  storeId    String   @map("store_id") @db.VarChar(36)
  customer   Customer @relation(fields: [customerId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])
  rating     Rating   @relation(fields: [ratingId], references: [id])
  store      Store    @relation(fields: [storeId], references: [id])

  @@unique([id, customerId])
  @@index([customerId], map: "CustomerPost_customer_id_fkey")
  @@index([storeId], map: "CustomerPost_store_id_fkey")
}

model StorePost {
  id      String @id @default(uuid()) @db.VarChar(36)
  title   String @db.TinyText
  postId  String @unique @map("post_id") @db.VarChar(36)
  storeId String @db.VarChar(36)
  post    Post   @relation(fields: [postId], references: [id])
  store   Store  @relation(fields: [storeId], references: [id])

  @@unique([id, storeId])
  @@index([storeId], map: "StorePost_storeId_fkey")
}
